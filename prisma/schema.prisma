generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  phone     String    @unique
  email     String?   @unique
  password  String
  cart      Cart?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  orders    Order[]
  address   Address[]
}

model Restaurant {
  id           String      @id @default(uuid())
  owner        Owner       @relation(fields: [owner_id], references: [id])
  owner_id     String
  name         String
  address      String
  city         String
  rating       Int         @default(0)
  deliveryTime Int         @default(30)
  order        Order[]
  menu         MenuItem[]
  coupons      Coupon[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
}

model Owner {
  id          String       @id @default(uuid())
  phone       String       @unique
  email       String?      @unique
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  restaurants Restaurant[]
}

model MenuItem {
  id           String      @id @default(uuid())
  name         String
  description  String
  type         String?
  price        Int
  available    Boolean
  order        Order[]
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
  cartItem     CartItem[]
  orderItem    OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  total     Int        @default(0)
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  cartItem  CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
}

model CartItem {
  id           String      @id @default(uuid())
  cart         Cart        @relation(fields: [cartId], references: [id])
  cartId       String
  name         String
  menuItem     MenuItem    @relation(fields: [menuItemId], references: [id])
  menuItemId   String
  quantity     Int
  price        Int
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
}

model Order {
  id              String        @id @default(uuid())
  user            User?         @relation(fields: [user_id], references: [id])
  user_id         String
  restaurant      Restaurant    @relation(fields: [restaurant_id], references: [id])
  items           MenuItem[]
  cartTotal       Int           @default(0)
  deliveryCharges Int           @default(0)
  address         Address       @relation(fields: [addressId], references: [id])
  addressId       String
  coupon          Coupon?       @relation(fields: [couponId], references: [id])
  couponId        String?
  total           Int
  status          Status        @default(PENDING)
  paymentMethod   PaymentMethod
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?     @updatedAt
  restaurant_id   String
  orderItem       OrderItem[]
}

model OrderItem {
  id           String      @id @default(uuid())
  order        Order[]
  name         String
  menuItem     MenuItem[]
  quantity     Int?
  price        Int
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String
}

model Address {
  id        String    @id @default(uuid())
  label     String    @default("")
  city      String    @default("")
  street    String    @default("")
  pinCode   String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  orders    Order[]
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
}

model Coupon {
  id           String        @id @default(uuid())
  code         String        @unique
  discount     Int?          @default(0)
  discountType DiscountType? @default(AMOUNT)
  status       CouponStatus? @default(ACTIVE)
  createdAt    DateTime      @default(now())
  orders       Order[]
  Restaurant   Restaurant?   @relation(fields: [restaurantId], references: [id])
  restaurantId String?
}

enum Status {
  PENDING
  COMPLETED
  CANCELED
}

enum CouponStatus {
  ACTIVE
  INACTIVE
}

enum PaymentMethod {
  CASH
  DEBIT_CARD
  RAZORPAY
}

enum DiscountType {
  PERCENTAGE
  AMOUNT
}
